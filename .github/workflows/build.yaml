name: Build Node.js backend and deploy to AWS ECR
on:   
  push:
    branches: 
      - 'CB**'
      - prod
      - uat
      - main

  pull_request:
    branches: 
      - prod
      - uat
      - main
    types:
      - opened
      - reopened
      - synchronize

  workflow_dispatch:
    inputs:
      environment:
         description: 'Please select the environment on which to run:'
         required: true
         default: 'dev'
         type: choice
         options:
          - dev
          - uat
          - prod

concurrency:
  group: ${{ github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-22.04
    permissions: 
      security-events: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Cache node-modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-node-modules-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm ci

      - name: Execute unit test
        run: npm run test 

      - name: Code Quality Check
        run: npm run lint
        continue-on-error: false

  build:
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/uat' || github.ref == 'refs/heads/prod')}}
    needs: test
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ZIQI }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ZIQI }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    
    - name: Build docker image for development environment
      env: 
        MONGO_URI: ${{ secrets.MONGO_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_LIFETIME: ${{ secrets.JWT_LIFETIME }}
      run: |
        docker build \
        --build-arg MONGO_URI="$MONGO_URI" \
        --build-arg JWT_SECRET="$JWT_SECRET" \
        --build-arg JWT_LIFETIME="$JWT_LIFETIME" \
        -t ${{ secrets.ECS_REGISTRY_ZIQI }}/crankbit-backend-${{ github.ref_name }}:latest \
        -t ${{ secrets.ECS_REGISTRY_ZIQI }}/crankbit-backend-${{ github.ref_name }}:${{ github.sha }} .
    
    - name: Push docker image to AWS ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{ secrets.ECS_REGISTRY_ZIQI }}
        docker push ${{ secrets.ECS_REGISTRY_ZIQI }}/crankbit-backend-${{ github.ref_name }}:latest
        docker push ${{ secrets.ECS_REGISTRY_ZIQI }}/crankbit-backend-${{ github.ref_name }}:${{ github.sha }}
 
    - name: Update ECS service
      env: 
        CLUSTER_NAME : Crankbit-cluster-${{ github.ref_name }}
        SERVICE_NAME : crankbit_service_${{ github.ref_name }}
        TASK_DEFINITION : crankbit_backend_task_${{ github.ref_name }}
      run: |
        aws ecs update-service \
        --cluster $CLUSTER_NAME \
        --service $SERVICE_NAME \
        --task-definition $TASK_DEFINITION \
        --force-new-deployment
